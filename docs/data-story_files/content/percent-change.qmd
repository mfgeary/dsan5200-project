```{r}
#| message: false
#| warning: false

library(tidyverse)
adult_arrests <- arrow::read_parquet("../../data/clean/adult_arrests_dc.parquet")
juvenile_arrests <- arrow::read_parquet("../../data/clean/juvenile_arrests_dc.parquet")
crime_dc <- arrow::read_parquet("../../data/clean/crime_dc.parquet")

car_arrests_month <- adult_arrests |>
    # Get number of adult car theft arrests by week
    mutate(day = case_when(
        str_detect(arrest_date, "/") ~ str_split_fixed(arrest_date, "/", 3)[, 2],
        TRUE ~ str_split_fixed(arrest_date, "-", 3)[, 3]
    )) |>
    # If no leading 0, add one
    mutate(day = if_else(nchar(day) == 1, paste0("0", day), day)) |>
    mutate(month = case_when(
        str_detect(arrest_date, "/") ~ str_split_fixed(arrest_date, "/", 3)[, 1],
        TRUE ~ str_split_fixed(arrest_date, "-", 3)[, 2]
    )) |>
    # If no leading 0, add one
    mutate(month = if_else(nchar(month) == 1, paste0("0", month), month)) |>
    mutate(year = case_when(
        str_detect(arrest_date, "/") ~ str_split_fixed(arrest_date, "/", 3)[, 3],
        TRUE ~ str_split_fixed(arrest_date, "-", 3)[, 1]
    )) |>
    mutate(Month = ymd(paste(year, month, day, sep = "-")) %>% floor_date("month")) |>
    filter(charge_description %in% c("Armed Carjacking", "Carjacking", "Unarmed Carjacking", "Unauthorized Use Of A Vehicle", "Unauthorized Use Of A Vehicle - Crime Of Violence", "Unauthorized Use Of A Vehicle - Prior Conviction", "Unlawful Entry Of A Motor Vehicle", "Theft First Degree (Stolen Auto)", "Theft Second Degree (Stolen Auto)")) |>
    count(Month) |>
    mutate(perc = (n - first(n)) / first(n) * 100)

car_theft_month <- crime_dc |>
    mutate(report_date_no_time = as.Date(report_date)) |>
    count(report_date_no_time) |>
    # Add in the missing dates with 0 car thefts
    complete(report_date_no_time = seq.Date(min(report_date_no_time), max(report_date_no_time), by = "day")) |>
    # fill in the missing values with 0
    mutate(n = if_else(is.na(n), 0, n)) |>
    # Summarise by month
    mutate(Month = floor_date(report_date_no_time, "month")) |>
    group_by(Month) |>
    summarise(n = sum(n)) |>
    mutate(perc = (n - first(n)) / first(n) * 100)

car_arrests_juvenile_month <- juvenile_arrests |>
    # Get number of juvenile car theft arrests by week
    mutate(date = ymd(arrest_date)) |>
    # get the month and year
    mutate(month = month(date), year = year(date)) |>
    mutate(Month = ymd(paste(year, month, "01", sep = "-")) %>% floor_date("month")) |>
    filter(top_charge_description %in% c("Armed Carjacking", "Carjacking", "Unarmed Carjacking", "Unauthorized Use Of A Vehicle", "Unauthorized Use Of A Vehicle - Crime Of Violence", "Unauthorized Use Of A Vehicle - Prior Conviction", "Unlawful Entry Of A Motor Vehicle", "Theft First Degree (Stolen Auto)", "Theft Second Degree (Stolen Auto)")) |>
    count(Month) |>
    mutate(perc = (n - first(n)) / first(n) * 100)

joiner <- car_theft_month |>
    rename("car_theft" = n, "car_theft_perc" = perc) |>
    full_join(car_arrests_month |> rename("car_arrests" = n, "car_arrests_perc" = perc)) |>
    full_join(car_arrests_juvenile_month |> rename("car_arrests_juvenile" = n, "car_arrests_juvenile_perc" = perc)) |>
    mutate(Month = as.Date(Month))

joiner_long <- joiner |>
    pivot_longer(
        cols = c("car_theft_perc", "car_arrests_perc", "car_arrests_juvenile_perc"),
        names_to = "type",
        values_to = "perc"
    ) |>
    filter(year(Month) <= 2023) |>
    mutate(type = case_when(
        type == "car_theft_perc" ~ "Car Theft",
        type == "car_arrests_perc" ~ "Car Theft Related Adult Arrests",
        type == "car_arrests_juvenile_perc" ~ "Car Theft Related Juvenile Arrests"
    ))

joiner_long_n <- joiner |>
    pivot_longer(
        cols = c("car_theft", "car_arrests", "car_arrests_juvenile"),
        names_to = "type",
        values_to = "n"
    ) |>
    filter(year(Month) <= 2023)

joiner_wide <- joiner |>
    select(contains("perc"), Month) |>
    filter((year(Month) == 2019 & month(Month) == 1) | (year(Month) == 2023 & month(Month) == 12)) |>
    pivot_longer(
        cols = c("car_theft_perc", "car_arrests_perc", "car_arrests_juvenile_perc"),
        names_to = "type",
        values_to = "perc"
    ) |>
    # pivot wider to get difference over time for dot plot
    pivot_wider(names_from = Month, values_from = perc) |>
    mutate(diff = `2023-12-01` - `2019-01-01`)
    

ojs_define(joiner_long = joiner_long)
ojs_define(joiner_wide = joiner_wide)
ojs_define(joiner_long_n = joiner_long_n)
```

```{ojs}
df = transpose(joiner_long)
    .map((d, i) => ({...d, Month: new Date(d.Month)}))

df2 = transpose(joiner_long_n)
    .map((d, i) => ({...d, Month: new Date(d.Month)}))

// create line chart with the data
Plot.plot({
  overflow: "visible",
  y: {grid: true, tickFormat: d => `${d > 0 ? "+" : ""}${Math.round(d)}%`, label: "Percent Change"},
  x: {type: "time", tickFormat: "%b %Y", label: "Month"},
  legend: {label: "Type"},
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(df, {x: "Month", y: "perc", stroke: "type", tip: true }),
  ]
})
```